services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    networks:
      - mongo-net

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_HOST
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: always
    networks:
      - mongo-net
    volumes:
    - kafka_data:/var/lib/kafka/data

  mongo1:
    image: mongo:8.0
    container_name: mongo1
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo1_data:/data/db
    restart: always
    networks:
      - mongo-net

  mongo2:
    image: mongo:8.0
    container_name: mongo2
    ports:
      - "27018:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo2_data:/data/db
    restart: always
    networks:
      - mongo-net

  mongo3:
    image: mongo:8.0
    container_name: mongo3
    ports:
      - "27019:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo3_data:/data/db
    restart: always
    networks:
      - mongo-net

  mongo-init-replica:
    image: mongo:8.0
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    entrypoint: >
      bash -c '
        echo "Waiting for MongoDB...";
        sleep 10;
        mongosh --host mongo1:27017 <<EOF
          rs.initiate({
            _id: "rs0",
            members: [
              { _id: 0, host: "mongo1:27017" },
              { _id: 1, host: "mongo2:27017" },
              { _id: 2, host: "mongo3:27017" }
            ]
          });
        EOF
      '
    networks:
      - mongo-net
    
  mongo-restore:
    image: mongo:8.0
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongo-init-replica
    volumes:
      - ./dump:/dump
    entrypoint: >
      bash -c '
        echo "Waiting for replica set to initialize...";
        sleep 5;
        mongorestore \
          --uri="mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0" \
          --db=test \
          --collection=accounts \
          dump/test/accounts.bson
      '
    networks:
      - mongo-net
  mongoku:
    image: huggingface/mongoku
    container_name: mongoku
    ports:
      - "3100:3100"
    networks:
      - mongo-net
      
  debezium:
    image: debezium-custom:latest
    container_name: debezium
    depends_on:
      - kafka
      - mongo2
      - mongo1
      - mongo3
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 3
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      ENABLE_DEBEZIUM_SCRIPTING: "true"
      
    networks:
      - mongo-net

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8088:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: always
    networks:
      - mongo-net

  clickhouse:
    image: clickhouse:25.5.3.75
    container_name: clickhouse
    ports: 
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=giaphu
    restart: always
    networks:
      - mongo-net

  clickhouse-connector:
    image: clickhouse-sink-custom:latest
    container_name: clickhouse-sink
    depends_on:
      - kafka
      - clickhouse
    ports:
      - "8084:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: clickhouse-sink
      CONNECT_REST_ADVERTISED_HOST_NAME: clickhouse-connector
      CONNECT_CONFIG_STORAGE_TOPIC: clickhouse_configs
      CONNECT_OFFSET_STORAGE_TOPIC: clickhouse_offsets
      CONNECT_STATUS_STORAGE_TOPIC: clickhouse_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter 
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_PARTITIONS: 25
      CONNECT_CONFIG_STORAGE_PARTITIONS: 1
      CONNECT_STATUS_STORAGE_PARTITIONS: 5
      CONNECT_TOPIC_CREATION_ENABLE: "true" 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - mongo-net

  metabase:
    image: metabase/metabase:v0.55.x
    container_name: metabase
    depends_on:
      - clickhouse
    volumes:
      - metabase-data:/metabase.db
    environment:
      - MB_DB_FILE=/metabase.db/metabase.db
    ports:
      - 3000:3000
    restart: always
    networks:
      - mongo-net

  postgresql:
    image: postgres:14
    hostname: postgresql
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "conduktor-console"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "change_me"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mongo-net

  conduktor-console:
    image: conduktor/conduktor-console:1.35.1
    ports:
      - "8080:8080"
    volumes:
      - conduktor_data:/var/conduktor
    environment:
      CDK_ORGANIZATION_NAME: "getting-started"
      CDK_DATABASE_URL: "postgresql://conduktor:change_me@postgresql:5432/conduktor-console"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:9009/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:9010/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-platform:8080/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:8080
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      mongo-net: {}
  conduktor-monitoring:
    image: conduktor/conduktor-console-cortex:1.35.1
    environment:
      CDK_CONSOLE-URL: "http://conduktor-console:8080"
    networks:
        mongo-net: {}

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  clickhouse_data:
  metabase-data:  
  adminmongo-data:
  pg_data: {}
  conduktor_data: {}
  kafka_data:

networks:
  mongo-net:
    driver: bridge